/*
 *
 *    J1K7_7
 * 
 */
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <cstring>
#include <list>
#include <map>
#include <iomanip>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <limits>
using namespace std;
typedef long long          ll;
typedef unsigned long long ull;
typedef long double        ld;
typedef pair<int,int>      pii;
typedef pair<ll,ll>        pll;
typedef vector<int>        vi;
typedef vector<long long>  vll;
#define l(x) 		       (x << 1) + 1
#define r(x) 		       (x << 1) + 2
#define mid(l, r) 	       ((l + r) >> 1)
#define mp                 make_pair
#define pb                 push_back
#define all(a)             a.begin(),a.end()
#define pr(n)              printf("%d",n)
#define s(n)               scanf("%d",&n)
#define debug(x)	       {cerr <<#x<<" = " <<x<<"\n"; }
#define debug2(x, y)       {cerr <<#x<<" = " <<x<<", "<<#y <<" = " <<y <<"\n";}
#define ss                 second
#define ff                 first
#define m0(x) 		       memset(x,0,sizeof(x))
#define snuke(c,itr)       for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)

const ll  mx_ll   = numeric_limits<ll> :: max();
const int mx_int  = numeric_limits<int> :: max();

const long double PI = (long double)(3.1415926535897932384626433832795);

inline bool ispow2(int x){return (x!=0 && (x&(x-1))==0);} //0 or 1

int msb(unsigned x){ union { double a; int b[2]; }; a = x; return (b[1] >> 20) - 1023; }

template<class T>
inline void cinarr(T a, int n){ for (int i=0;i<n;++i) cin >> a[i];}

inline ll gcd(ll a,ll b){ll t;while(b){a=a%b;t=a;a=b;b=t;}return a;}
inline ll lcm(ll a,ll b){return a/gcd(a,b)*b;}

inline int nextint(){ int x; scanf("%d",&x); return x; }
inline ll nextll(){ ll x; scanf("%lld",&x); return x; }


ll powmod(ll a, ll b, ll m)
{
	if ( m == 0 ) return 0;
    ll oo = 1e9;
    if (a < oo && b < oo)
        return (a * b) % m;
    ll ans = 0;
    for (; b; b >>= 1)
    {
        if (b & 1)
            ans = (ans + a) % m;
        a = (a + a) % m;
    }
    return ans;
}

const int MAX = 10005;

ll mod(ll a, ll b)
{
	if( b == 0 ) 
		return 0 ; 
    return ((a % b) + b) % b;
}


ll extended_euclid(ll a, ll b, ll &x, ll &y)
{
    ll xx = y = 0;
    ll yy = x = 1;
    while (b)
    {
        ll q = a / b;
        ll t = b;
        b = a % b;
        a = t;
        t = xx;
        xx = x - q * xx;
        x = t;
        t = yy;
        yy = y - q * yy;
        y = t;
    }
    return a;
}

vi modular_linear_equation_solver(ll a, ll b, ll n)
{
    ll x, y;
    vi solutions;
    ll d = extended_euclid(a, n, x, y);
    if (!(b % d))
    {
        x = mod(x * (b / d), n);
        for (ll i = 0; i < d; i++)
            solutions.push_back(mod(x + i * (n / d), n));
    }
    return solutions;
}

// computes b such that ab = 1 (mod n), returns -1 on failure
ll mod_inverse(ll a, ll n)
{
    ll x, y;
    ll d = extended_euclid(a, n, x, y);
    if (d > 1)
        return -1;
    return mod(x, n);
}

pll chinese_remainder_theorem(ll x, ll a, ll y, ll b)
{
    ll s, t;
    ll d = extended_euclid(x, y, s, t);
    if (a % d != b % d)
        return make_pair(0, -1);

    ll tmp = powmod(s, b, x * y);
    tmp = powmod(tmp, x, x * y);

    ll aux = powmod(t, a, x * y);
    aux = powmod(aux, y, x * y);

    return make_pair(mod(tmp + aux, x * y) / d, x * y / d);
}

// z % x[i] = a[i]
// z = a[i] mod x[i] 

//pll.ss returns LCM ( x[0..n] )
//pll.ff returnsz value 
pll chinese_remainder_theorem(const vll &x, const vll &a)
{
    pll ret = make_pair(a[0], x[0]);
    for (ll i = 1; i < (int) x.size(); i++)
    {
        ret = chinese_remainder_theorem(ret.second, ret.first, x[i], a[i]);
        if (ret.second == -1)
            break;
    }
    return ret;
}
ll n , m , k ; 
ll L = 1;
const ll maxN = 1e12;
vector<ll> a;
vector<ll> c;
bool solve()
{
	
	L = a[0];
	for(int i = 1; i < a.size(); i++)
	{
		L /= gcd(L,a[i]);
		if ( L > n/a[i] )
			return false;
		L *= a[i];
	}

	ll col_num = chinese_remainder_theorem(a,c).ff;
	ll row_num = chinese_remainder_theorem(a,c).ss;
	// (0 , -1 ) bug

	if ( col_num  == 0 )
		col_num = row_num;


	if ( row_num == -1 || col_num + k - 1 > m )
		return false;

	for(int i = 0; i < k; i++)
	{
		if( gcd(row_num  , col_num + i ) != a[i] )
			return false;
	}
	return true;
}

int main()
{
    ios_base::sync_with_stdio(false); cin.tie(0);

	cin >> n >> m >> k;
	a.resize(k) , c.resize(k);
	for(int i = 0 ; i < k ; i++)
	{
		ll x;  cin >> x;
		a[i] = x;
		
		c[i] = mod(-i,a[i]);
		if( c[i] < 0 )
			c[i] += a[i];
	}

	if ( solve() )
		cout << "YES" << "\n";
	else
		cout << "NO" << "\n";

	return 0;
}

